const CACHE_VERSION = 'v1';
const CACHE_NAME = CACHE_VERSION + ':sw-cache-';

self.addEventListener('install', function(event) {
  event.waitUntil(
    caches.open(CACHE_NAME).then(function(cache) {
      return cache.addAll([
        // the shell
        '/',

        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '<%= asset_path "application.js" %>',
        '<%= asset_path "application.css" %>',

        'https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.2/fonts/roboto/Roboto-Regular.woff',
        'https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.2/fonts/roboto/Roboto-Regular.woff2',
        'https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.2/css/materialize.min.css',
        'https://fonts.googleapis.com/css?family=Noto+Serif',
        'https://fonts.googleapis.com/icon?family=Material+Icons'
      ])}))}
);

self.addEventListener('activate', function(event) {
  event.waitUntil(function() {
    return caches.keys().then(function(cacheNames) {
      return Promise.all(
        // clear all caches that don't match the current version
        cacheNames.filter(function(cacheName) {
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete;
        }))})
  })}
);

// Borrowed from https://github.com/TalAter/UpUp
self.addEventListener('fetch', function(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request)
      .catch(function() {
        // if it fails, try to return request from the cache
        return caches.match(event.request).then(function(response) {
          if (response) {
            return response;
          }

          // if not found in cache, return html for the root page
          if (event.request.mode === 'navigate' || (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
            return caches.match('/');
          }
        })}))}
);
