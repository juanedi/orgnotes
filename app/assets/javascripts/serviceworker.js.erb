const CACHE_VERSION = 'v1';
const CACHE_NAME = CACHE_VERSION + ':sw-cache-';

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) =>
      cache.addAll([
        // the shell
        '/',

        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '<%= asset_path "application.js" %>',
        '<%= asset_path "application.css" %>',

        // these work because cloudfare sends the appropriate cors headers
        'https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.2/fonts/roboto/Roboto-Regular.woff',
        'https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.2/fonts/roboto/Roboto-Regular.woff2'
      ])))}
);

self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) =>
      Promise.all(
        // clear all caches that don't match the current version
        cacheNames.filter((cacheName) => cacheName.indexOf(CACHE_VERSION) !== 0)
                  .map(caches.delete)
      )))}
);

// Borrowed from https://github.com/TalAter/UpUp
self.addEventListener('fetch', (event) => {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request)
      .catch(() =>
        // if it fails, try to return request from the cache
        caches.match(event.request).then((response) => {
          if (response) {
            return response;
          }

          // if not found in cache, return html for the root page
          if (event.request.mode === 'navigate' || (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
            return caches.match('/');
          }
        })))}
);
